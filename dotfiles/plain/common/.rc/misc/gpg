# vim: set ft=sh: -*- mode: sh -*-

# Only for interactive shells.
[[ "${-}" != *i* ]] && return

# And only if GnuPG is installed.
[[ -x "$(command -v gpg-agent)" ]] || return

unset GPG_TTY
unset GPG_AGENT_INFO
unset SSH_AUTH_SOCK
unset SSH_AGENT_PID

# For versions of GPG less than 2.1.0 the GPG_AGENT_INFO environment
# variable is still a thing and needs to be set appropriately.
#
# I hear you asking, "who still installs versions of GPG from 2009?"
# RHEL/CentOS 6, my friend. Oh, how I hate it.
gpg_version=$(gpg-agent --version | awk '/GnuPG/ { print $3 }')
major=${gpg_version:0:1}
minor=${gpg_version:2:1}
revision=${gpg_version:4}
if [[ $major -le 1 || ($major -eq 2 && $minor -eq 0 || ($minor -eq 1 && $revision -eq 0)) ]]; then
    needs_gpg_agent_info=1
fi
unset gpg_version major minor revision

if [[ -n $needs_gpg_agent_info ]]; then
    pgrep -u "$USER" -x gpg-agent &>/dev/null
    if [ $? -ne 0 ]; then
        eval $(gpg-agent --daemon --write-env-file "${HOME}/.gnupg/agent-info")
    else
        if [ -f "${HOME}/.gnupg/agent-info" ]; then
            . "${HOME}/.gnupg/agent-info"
            export GPG_AGENT_INFO SSH_AUTH_SOCK SSH_AGENT_PID
        fi
    fi
else
    gpg-connect-agent -q /bye
    export SSH_AUTH_SOCK=$(gpgconf --list-dirs agent-ssh-socket)
fi

function gpg_update_tty {
    if pgrep gpg-agent >/dev/null; then
        gpg-connect-agent -q UPDATESTARTUPTTY /bye >/dev/null
    fi
}

export GPG_TTY=$(tty)
export PROMPT_COMMAND="gpg_update_tty;$PROMPT_COMMAND"
