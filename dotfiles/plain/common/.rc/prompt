# vim: set ft=sh: -*- mode: sh -*-
########################################################################
#
# ~/.rc/prompt
#
# This file is sourced from .rc/rc.
#
# All configuration to setup the shell prompt ($PS1, etc.) should go
# in here.
########################################################################

RC_FILENAME=".rc/prompt"
rc_log "starting up"

# None of this matters if the shell isn't interactive.
[[ "${-}" != *i* ]] && return

if [ -x "$(unalias -a; command -v git)" ]; then
    # If the "git" command exists on this system, define a function that
    # can be used in the $PS1 prompt to show the user relevant
    # information about a git repository, if the user is currently in
    # one.
    function parse_git_status {
        # Sometimes git repositories are large, and calculating
        # this information takes too long.  In that case, the user can
        # define $NOPATHBRANCHES, which will stop this function from
        # parsing the git repo.
        if [ -z "$NOPATHBRANCHES" ]; then
            typeset branch=$(git rev-parse --abbrev-ref HEAD 2> /dev/null)
            [[ -z $branch ]] && return

            typeset status=$(git status 2> /dev/null)
            typeset result=$branch

            [[ "$status" = *deleted:* ]] && result=${result}-
            [[ "$status" = *modified:* ]] && result=${result}*
            [[ "$status" = *Untracked\ files:* ]] && result=${result}+
            printf "[$result] "
        fi
    }
    GITPARSING=1
fi

[[ -z "$SCREEN_COLORS" ]] && SCREEN_COLORS=$(tput colors)
if [ $SCREEN_COLORS -eq 0 ]; then
    # Build a "dumb" prompt that should work everywhere.
    [[ -n "$GITPARSING" ]] && g='$(parse_git_status)'
    export PS1="\n\u@\h\$($g) \w\n\$ "
else
    # Force 256-color in tmux if the "real" terminal supports 256
    # colors.
    if [ "$TERM" == "screen" -a "$SCREEN_COLORS" == 256 ]; then
        TERM=screen-256color
    fi

    bold=$(tput bold 2> /dev/null)
    dim=$(tput dim 2> /dev/null)
    reset=$(tput sgr0)

    background=$(tput setaf 230)
    foreground=$(tput setaf 016)
    color0=$(tput setaf 106)
    color1=$(tput setaf 160)
    color2=$(tput setaf 028)
    color3=$(tput setaf 094)
    color4=$(tput setaf 026)
    color5=$(tput setaf 125)
    color6=$(tput setaf 023)
    color7=$(tput setaf 188)
    color8=$(tput setaf 060)
    color9=$(tput setaf 124)
    color10=$(tput setaf 022)
    color11=$(tput setaf 058)
    color12=$(tput setaf 026)
    color13=$(tput setaf 097)
    color14=$(tput setaf 024)
    color15=$(tput setaf 230)

    # Change the prompt color depending on whether the real UID is root
    # or a regular user.
    if [ $(id -ru) == '0' ] ; then
        HOSTCOLOR="\[$color1\]"
    else
        HOSTCOLOR="\[$color4\]"
    fi

    [[ -n "$GITPARSING" ]] && g="\[${reset}${color5}\]\$(parse_git_status)\[${reset}\]"
    [[ -n "$SSH_CLIENT" ]] && host="\[${color2}\]@\[${reset}${color10}\]\h\[${reset}\]"

    # Set the title of an xterm.
    case $TERM in
        xterm*|rxvt*|screen*)
            TERMTITLE="\[\e]0;\u@\h: \w\a\]"
            ;;
    esac

    # Build a colorized prompt.
    PS1="\n${TERMTITLE}"                                # Set the xterm title.
    PS1="${PS1}${HOSTCOLOR}\u"                          # Username
    PS1="${PS1}$host"                                   # Add the host, if not local
    PS1="${PS1} "
    PS1="${PS1}$g"                                      # git status, if available
    PS1="${PS1}\[${color2}\]\w\[${reset}\]"             # working directory
    PS1="${PS1}\n"                                      # new line.
    PS1="${PS1}\[${color2}\]\$\[${reset}\] "            # Either '$' or '#'
    export PS1

    PS2="\[${color3}\]> \[${reset}\]"
    export PS2
fi

unset HOSTCOLOR g b host TERMTITLE

rc_log "done."
