# vim: set ft=sh:
########################################################################
#
# Copyright (c) 2014 Seth Wright (seth@crosse.org)
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL
# WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE
# AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
# DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR
# PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
# TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
# PERFORMANCE OF THIS SOFTWARE.
########################################################################
#
# ~/.rc/term
#
# This file is sourced from .rc/rc.
#
# Terminal configuration and sanitation goes in this file.
########################################################################

RC_MODULE=term
RC_FILENAME=".rc/${RC_MODULE}"

rc_log "starting up"

# None of this matters if the shell isn't interactive.
[[ "${-}" != *i* ]] && return

# Attempt to sanitize TERM.  This is (mostly) wholesale-taken from the
# comment by Steven Black at:
#   http://vim.wikia.com/wiki/256_colors_in_vim.
if [ "$TERM" = "xterm" ] ; then
    if [ -z "$COLORTERM" ] ; then
        if [ -z "$XTERM_VERSION" ] ; then
            echoerr "Warning: Terminal wrongly calling itself 'xterm'."
        else
            case "$XTERM_VERSION" in
                "XTerm(256)")
                    TERM="xterm-256color"
                    ;;
                "XTerm(88)")
                    TERM="xterm-88color"
                    ;;
                XTerm/OpenBSD*)
                    # OpenBSD's xterm can handle 256 colors, but doesn't
                    # seem to advertise it.
                    TERM="xterm-256color"
                    ;;
                XTerm)
                    ;;
                *)
                    echoerr "Warning: Unrecognized XTERM_VERSION: $XTERM_VERSION"
                    ;;
            esac
        fi
    else
        case "$COLORTERM" in
            gnome-terminal)
                # Those crafty Gnome folks require you to check COLORTERM,
                # but don't allow you to just *favor* the setting over TERM.
                # Instead you need to compare it and perform some guesses
                # based upon the value. This is, perhaps, too simplistic.
                TERM="gnome-256color"
                ;;
            *)
                echoerr "Warning: Unrecognized COLORTERM: $COLORTERM"
                ;;
        esac
    fi
fi

# ...and now, try to figure out how many colors $TERM supports, along
# with more $TERM sanitization.

function get_best_term {
    T=${1%-*color}

    for term in "${T}-256color" "${T}-88color" "${T}"; do
        COLORS="$(tput -T ${term} colors 2>/dev/null)"
        if [ -n "$COLORS" ] ; then
            echo "$term" 
            return
        fi
    done

    echo "Unknown terminal type/class '$1'. Things may not work right." 1>&2
    echo "$1"
}

TERM="$(get_best_term $TERM)"

SCREEN_COLORS="$(tput colors)"
if [ -z "$SCREEN_COLORS" ] ; then
    # A 256-color version of this terminal must not exist.
    TERM=${TERM:%-*color}

    case "$TERM" in
        screen-*color-bce)
            rc_log "Unknown terminal $TERM. Falling back to 'screen-bce'."
            export TERM=screen-bce
            ;;
        *-88color)
            rc_log "Unknown terminal $TERM. Falling back to 'xterm-88color'."
            export TERM=xterm-88color
            ;;
        *-256color)
            rc_log "Unknown terminal $TERM. Falling back to 'xterm-256color'."
            export TERM=xterm-256color
            ;;
    esac
    SCREEN_COLORS=`tput colors`
    if [ -z "$SCREEN_COLORS" ] ; then
        case "$TERM" in
            gnome*|xterm*|konsole*|aterm|[Ee]term)
                echoerr "Unknown terminal $TERM. Falling back to 'xterm'."
                export TERM=xterm
                ;;
            rxvt*)
                echoerr "Unknown terminal $TERM. Falling back to 'rxvt'."
                export TERM=rxvt
                ;;
            screen*)
                echoerr "Unknown terminal $TERM. Falling back to 'screen'."
                export TERM=screen
                ;;
        esac
        SCREEN_COLORS=`tput colors`
    fi
fi

rc_set_module $RC_MODULE
rc_log "done."
