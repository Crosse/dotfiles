# vim: set ft=sh:
########################################################################
#
# ~/.rc/rc
#
########################################################################

RC_FILENAME=".rc/rc"
RC_PATH="${HOME}/.rc"

# Get rc_* functions as early as possible.
. "${RC_PATH}/rc_utils"

rc_log "starting up"
rc_source_file "${RC_PATH}/functions"

shell=$(basename "${0#-}")
case "${shell#-}" in
    bash)
        rc_log "shell identifies as bash"
        # Source global bashrc files, if they exist.
        rc_source_file /etc/bashrc

        # Enable history appending instead of overwriting.
        shopt -s histappend
        # Enable the ability to use ** in pathname expansion.
        shopt -s globstar

        # Do not append duplicate lines and lines that begin with a
        # space to history
        export HISTCONTROL=ignoreboth

        ;;
    ksh)
        rc_log "shell identifies as ksh"
        case "$-" in
            *i*)
                # Things to do if the shell is interactive.

                # Map ^L to clear, but only for pdksh.
                if [[ "$KSH_VERSION" == *PD* ]]; then
                    bind -m '^L'='^Uclear^J^Y'
                fi

                # Create tracked aliases for all commands.  This is the
                # equivalent of "hashall" in bash.
                set -o trackall
                ;;
        esac
        ;;
esac

# Any user-written executable things can go in ~/bin.
# We do this here so that these are on the PATH for the rest of the
# rc-scripts; however, once we've processed everything, we'll need to
# potentially move them back to the beginning of the PATH (see the
# bottom of this script).
prepend_to_path "/usr/local/bin"
prepend_to_path "${HOME}/.local/bin"
prepend_to_path "${HOME}/bin"
rc_source_file "${RC_PATH}/exports"

case "$-" in
    *i*)
        # Shell-agnostic things to do if the shell is interactive.

        rc_log "shell is interactive"

        # Using ksh, setting EDITOR or VISUAL (above) also sets vi key bindings.
        # This sets it back to emacs, which is what I prefer.
        # In other shells, it doesn't hurt to set it as well.
        set -o emacs

        # For ksh, enable history.  For both ksh and bash, log to the same file.
        export HISTFILE=$HOME/.history

        # Disable Ctrl-S.
        stty -ixon

        # Set up the terminal.
        rc_source_file "${RC_PATH}/term"

        # Set $PS1 to something pretty.
        rc_source_file "${RC_PATH}/prompt"

        ;;
esac

rc_source_file "${RC_PATH}/aliases"

# OS-specific stuff can be found in .rc/os/<uname>; for instance:
# - OpenBSD:    .rc/os/OpenBSD
# - Linux:      .rc/os/Linux
# - OSX:        .rc/os/Darwin
rc_source_file "${RC_PATH}/os/$(uname)"

# Source the component files in .rc/misc, but only if they are not
# listed in a local file named ~/rc_ignore. The format of .rc_ignore
# should be the exact file name of each component to skip, one per line.
[[ -r "${HOME}/.rc_ignore" ]] && RC_SKIP=$(<"${HOME}/.rc_ignore")
for f in ${RC_PATH}/misc/*; do
    unset skip
    for m in "${RC_SKIP[@]}"; do
        if [ "$(basename $f)" == "$m" ]; then
            rc_log "skipping $m due to .rc_ignore"
            skip=1
            break
        fi
    done
    [[ -z "$skip" ]] && rc_source_file "$f"
done

# Make sure the user's personal "bin" directory is the first thing on
# the PATH by re-adding them and then deduplicating the PATH.
prepend_to_path "${HOME}/.local/bin"
prepend_to_path "${HOME}/bin"
dedupe_path
export PATH

rc_log "done."
remove_rc_from_env
