# vim: set ft=sh:
########################################################################
#
# ~/.rc/functions
#
# This file is sourced from ~/.rc/rc.  It is sourced before any other
# files in the ~/.rc directory, because many of the functions defined
# here are used in other files in ~/.rc.
#
# All global functions should be defined here.  However, note that
# functions that are required only on certain platforms should be
# defined in that platform's respective ~/.rc/os/$(uname) file.  Note
# that the ~/.rc/os/* files are not sourced until almost the end of
# ~/.rc/rc; this is okay, though, because OS-dependent functions should
# probably only be used in the OS-dependent rc script.
#
########################################################################

RC_FILENAME=".rc/functions"

rc_log "starting up"

function remove_from_path {
    # Remove a path from a path variable.
    #
    # Usage:
    #   $ remove-from-path path/to/remove [PATH_VAR_NAME]
    #
    # (Note the lack of "$" on PATH_VAR_NAME)
    # If PATH_VAR_NAME isn't provided, PATH is assumed.
    typeset NEWPATH
    typeset DIR
    typeset PATHVARIABLE=${2:-PATH}
    eval "typeset TEMPPATH=\"\$$PATHVARIABLE\""
    typeset IFS=":"
    for DIR in $TEMPPATH; do
        if [ "$DIR" != "$1" ] ; then
            NEWPATH="${NEWPATH:+$NEWPATH:}$DIR"
        fi
    done
    export $PATHVARIABLE="${NEWPATH%%:}"
}

function in_path {
    typeset DIR
    typeset PATHVARIABLE=${2:-PATH}
    eval "typeset TEMPPATH=\"\$$PATHVARIABLE\""
    typeset IFS=":"
    for DIR in $TEMPPATH; do
        if [ "$DIR" == "$1" ] ; then
            typeset FOUND=1
            break
        fi
    done
    [[ -n "$FOUND" ]] && true || false
}

function prepend_to_path {
    # Prepend a path to a path variable.  If the path already exists, it
    # will be removed first.
    #
    # Usage:
    #   $ prepend-to-path path/to/prepend [PATH_VAR_NAME]
    #
    # (Note the lack of "$" on PATH_VAR_NAME)
    # If PATH_VAR_NAME isn't provided, PATH is assumed.
    remove_from_path $1 $2
    typeset PATHVARIABLE=${2:-PATH}
    if [ -d "$1" ]; then
        eval "typeset TEMP=\"$1:\$$PATHVARIABLE\""
        TEMP="${TEMP%%:}"
        export $PATHVARIABLE="$TEMP"
    fi
}

function append_to_path {
    # Append a path to a path variable.  If the path already exists, it
    # will be removed first.
    #
    # Usage:
    #   $ append-to-path path/to/append [PATH_VAR_NAME]
    #
    # (Note the lack of "$" on PATH_VAR_NAME)
    # If PATH_VAR_NAME isn't provided, PATH is assumed.
    remove_from_path $1 $2
    typeset PATHVARIABLE=${2:-PATH}
    if [ -d "$1" ]; then
        eval "typeset TEMP=\"\$$PATHVARIABLE:$1\""
        TEMP="${TEMP##:}"
        export $PATHVARIABLE="$TEMP"
    fi
}

# Taken from
# https://github.com/jfrazelle/dotfiles/blob/master/.functions
calc() {
    local result=""
    result="$(printf "scale=10;$*\n" | bc --mathlib | tr -d '\\\n')"
    #                       └─ default (when `--mathlib` is used) is 20

    if [[ "$result" == *.* ]]; then
        # improve the output for decimal numbers
        printf "$result" |
        sed -e 's/^\./0./'            `# add "0" for cases like ".5"`  \
            -e 's/^-\./-0./'          `# add "0" for cases like "-.5"` \
            -e 's/0*$//;s/\.$//';      # remove trailing zeros
    else
        printf "$result"
    fi
    printf "\n"
}

# Syntax-highlit less(1)
cless() {
    if [ -z "$(command -v pygmentize)" ]; then
        echo "install pygmentize to use cless" 1>&2
        return
    fi
    local f="$1"
    [[ -z "$f" ]] && f="-"
    cat "$f" | pygmentize -g | less
}

signaci() {
    if [ -z "$(command -v gpg2)" ]; then
        echo "install gpg2 to use signaci" 1>&2
        return
    fi
    ACI="$1"
    gpg2 -ao "${ACI}.asc" -b "$ACI"
    gpg2 --verify "${ACI}.asc" "${ACI}"
}

ssh_gen_keys() {
    # Generate ssh keys if they do not already exist.
    if [ ! -d "${HOME}/.ssh/" ]; then
        mkdir -p "${HOME}/.ssh/"
        chown ${USER}:$(id -ng) "${HOME}/.ssh/"
        chmod 700 "${HOME}/.ssh"
    fi

    for type in rsa ecdsa ed25519; do
        keyfile="${HOME}/.ssh/id_${type}"
        if [ ! -f "$keyfile" ]; then
            printf "Creating missing $type SSH key for ${USER}: "
            ssh-keygen -q -t $type -f "$keyfile" -N ""
            printf "done.\n"
        fi
    done

}

goto() {
    if [[ $(shopt -q globstar) ]]; then
        echo "globstar must be set ('shopt -s globstar') to use goto." 1>&2
        return
    fi

    cd ${HOME}/code/**/${1}/
}

repo() {
    local giturl
    giturl=$(git config --get remote.origin.url | sed 's/git@/\/\//g' | sed 's/.git$//' | sed 's/https://g' | sed 's/:/\//g')
    if [[ $giturl == "" ]]; then
        echo "Not a git repository or no remote.origin.url is set."
    else
        local gitbranch
        gitbranch=$(git rev-parse --abbrev-ref HEAD)
        local giturl="http:${giturl}"

        if [[ $gitbranch != "master" ]]; then
            if echo "${giturl}" | grep -i "bitbucket" > /dev/null ; then
                local giturl="${giturl}/branch/${gitbranch}"
            else
                local giturl="${giturl}/tree/${gitbranch}"
            fi
        fi

        echo "$giturl"
        open "$giturl"
    fi
}

rc_log "done."
