# vim: set ft=sh: -*- mode: sh -*-

# Only for interactive shells.
[[ "${-}" != *i* ]] && return

# No need to do anything if the Github 'hub' command isn't installed.
[[ -n $(command -v hub) ]] || return

alias git=$(command -v hub)

function hubtoken {
    local token_path="${XDG_CONFIG_HOME}/github/tokens"

    local action="$1"
    case $action in
        list)
            if [[ -d $token_path ]]; then
                echo "Found tokens for the following Github servers:"
                for token in $token_path/*.token; do
                    echo $(basename "${token%%.token}")
                done
            else
                echo "No tokens found in $token_path" >&2
            fi
            ;;
        set)
            local server="$2"
            if [[ -z $server ]]; then
                echo "Usage: hubtoken server.name" >&2
                return
            fi
            local token_file="${token_path}/${server}.token"
            if [[ -r $token_file ]]; then
                echo "Using token for $server"
                export GITHUB_TOKEN=$(<$token_file)
            else
                echo "No token found for $server" >&2
            fi
            ;;
        *)
            echo "Usage: hubtoken list" >&2
            echo "       hubtoken set server.name" >&2
            ;;
    esac
}

_hubtoken() {
    local cur prev words cword
    _init_completion || return

    case $prev in
        list)
            return 0
            ;;
        set)
            COMPREPLY=()
            cur="${COMP_WORDS[COMP_CWORD]}"
            COMPREPLY=( ${COMPREPLY[@]:-} $(compgen -W "$(hubtoken list | tail -n +2)" -- "${cur}") )
            return 0
            ;;
        *)
            COMPREPLY=( ${COMPREPLY[@]:-} $(compgen -W "list set" -- "${cur}") )
            return 0
            ;;
    esac

}

complete -F _hubtoken hubtoken
