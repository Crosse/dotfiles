#!/usr/bin/python

import argparse
import json
import logging
import os
import urllib2

logger = logging.getLogger('optimize-segments')

def main():
    endpoint = ""
    verbose = False
    dryrun = False
    indices = []

    logger.setLevel(logging.DEBUG)
    ch = logging.StreamHandler()
    ch.setLevel(logging.INFO)
    ch.setFormatter(logging.Formatter('%(asctime)s [%(levelname)s] %(message)s', datefmt='%Y-%m-%d %I:%M:%S'))
    logger.addHandler(ch)

    verbose, dryrun, endpoint, indices = parse_opts()

    if verbose:
        ch.setLevel(logging.DEBUG)

    if indices:
        url = '%s/_cat/indices/%s/?h=index,sc,pri,r' % (endpoint, ','.join(indices))
    else:
        url = '%s/_cat/indices?h=index,sc,pri,r' % endpoint

    logger.debug('ES endpoint: %s', url)

    data = http_read(url).split('\n')
    indices = [ new_index(line, uri_stem) for line in data ]
    for index in indices:
        index.optimize(dryrun)
        break


def parse_opts():
    global verbose
    global dryrun
    global endpoint
    global indices

    parser = argparse.ArgumentParser(description='Optimize Elasticsearch indices.')
    parser.add_argument("-v", "--verbose", action="store_true",
            help="verbose logging")
    parser.add_argument("-d", "--dry-run", action="store_true", dest="dryrun",
            help="report indices that need to be optimized, but do not optimize them.")
    parser.add_argument("-e", "--endpoint", required=True,
            help="the Elasticsearch endpoint to use. This should be a URI, like 'http://host:port'")
    parser.add_argument("indices", nargs='*')
    args = parser.parse_args()

    if len(args.endpoint) == 0:
        ArgumentParser.error("No ES enpoint given")

    return args.verbose, args.dryrun, args.endpoint, args.indices


class Index(object):
    uri_stem = ""
    name = ""
    segs = -1
    prim = -1
    repl = -1

    @property
    def minimum_segments(self):
        return self.primaries + (self.primaries * self.replicas)

    @property
    def segments(self):
        return self.segs

    @segments.setter
    def set_segments(self, val):
        self.segs = int(val)

    @property
    def primaries(self):
        return self.prim

    @primaries.setter
    def set_primaries(self, val):
        self.prim = int(val)

    @property
    def replicas(self):
        return self.repl

    @replicas.setter
    def set_replicas(self, val):
        self.repl = int(val)

    def _http_read(self, url):
        req = urllib2.Request(url)
        req.add_header("User-Agent", "OptimizeIndex/0.1")

        try:
            response = urllib2.urlopen(req)
            if response.code != 200:
                print "HTTP status %d returned" % response.code
                return
        except urllib2.HTTPError, e:
            print "HTTP error %d while checking url (%s)" % (e.code, url)
            return
        except urllib2.URLError, e:
            print "Error checking url (%s): %s" % (url, e.reason)
            return
        data = response.read()
        return data

    def optimize(self, dryrun):
        if self.segments == self.minimum_segments:
            print "%s: fully optimized (%d segments, %d primaries, %d replicas)" % (self.name, self.segments, self.primaries, self.replicas)
            return
        else:
            print "%s: starting optimization (%d segments > %d segments)" % (self.name, self.segments, self.optimized)

        if not dryrun:
            url = '%s/_optimize?max_num_segments=1' % self.uri_stem
            response = self._http_read(url)
            # response will look like this:
            # {"_shards":{"total":4,"successful":4,"failed":0}}
            r = json.loads(response)
            shards = r['_shards']
            print "%s: %d total shards; %d successful, %d failed" % (index, shards['total'], shards['successful'], shards['failed'])


def new_index(line, uri_stem):
    if len(line) == 0:
        return

    index = Index()
    index.uri_stem = uri_stem
    #index.name, index.segments, index.primaries, index.replicas = line.split()
    a = line.split()
    index.name = a[0]
    index.segments = a[1]
    index.primaries = a[2]
    index.replicas = a[3]
    return index


if __name__ == '__main__':
    main()
