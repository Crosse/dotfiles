#!/usr/bin/env perl

use strict;
use warnings;
use 5.010;
use feature qw{ say };
no warnings 'experimental';

use POSIX qw(uname);

binmode(STDOUT, ":utf8");


my @UPOWER_STATE = qw(unknown charging discharging fully_charged
               pending_charge pending_discharge);
my %UPOWER_STATE = map {$UPOWER_STATE[$_] => $_} 0..$#UPOWER_STATE;

my @uname = uname();

given ($uname[0]) {
    when ($_ eq "Linux") {
        batt_linux();
    }
    when ($_ eq "Darwin") {
        batt_darwin();
    }
    default {
        print "Unknown!";
        exit 1;
    }
}

sub timedelta {
    my ($dif) = @_;
    my ($s, $m, $h, $d);

    $dif -= $s = $dif % 60; $dif /= 60;
    $dif -= $m = $dif % 60; $dif /= 60;
    $dif -= $h = $dif % 24; $dif /= 24;
    $d = $dif + 0;
    if ($d > 0) { "${d}d ${h}h" }
    elsif ($h > 0)  { "${h}h ${m}m" }
    elsif ($m > 0)  { "${m} mins" }
    else        { "${s} secs" }
}

sub batt_darwin {
    my $re = qr/InternalBattery.*?(\d+)%; (\w+); \(?((.*) remaining|no estimate)\)?/; 
    my @output = split "\n", `pmset -g ps`;
    foreach (@output) {
        if ($_ =~ $re) {
            my $state;
            if ($2 eq "charged") {
                $state = 3;
                my $icon = get_battery_icon($1, $state);
                printf("%s (%s%%)\n", chr($icon), $1);
            } else {
                $state = $UPOWER_STATE{$2};
                my $icon = get_battery_icon($1, $state);
                printf("%s (%s)\n", chr($icon), $4);
            }
            return;
        }
    }
}

sub get_battery_icon {
    my ($pct, $state) = @_;

    my $icon;
    if ($state eq $UPOWER_STATE{discharging}) {
        $icon = 0xf578;
    } elsif ($state eq $UPOWER_STATE{charging}) {
        $icon = 0xf584;
    } elsif ($state eq $UPOWER_STATE{fully_charged} ||
             $state eq $UPOWER_STATE{pending_charge}) {
        $icon = 0xfba3; # plug icon
    } else {
        $icon = 0xf582; # battery with exclamation point
    }

    if ($state == $UPOWER_STATE{discharging}) {
        my $ofs = sprintf("%.0f", $pct / 10);
        if ($ofs < 10) {
            $icon += $ofs;
        }
    } elsif ($state == $UPOWER_STATE{charging}) {
        my $ofs = sprintf("%.0f", $pct / 10);
        if ($pct <= 30) {
            $icon = 0xf585;
        } elsif ($pct < 40) {
            $icon = 0xf586;
        } elsif ($pct < 60) {
            $icon = 0xf587;
        } elsif ($pct < 80) {
            $icon = 0xf588;
        } elsif ($pct < 90) {
            $icon = 0xf589;
        } elsif ($pct >= 90) {
            $icon = 0xf58a;
        }
    }
    return $icon;
}

sub batt_linux {
    require Net::DBus::Reactor;
    require Net::DBus::Dumper;
    require Net::DBus;

    my $batt = Net::DBus->system
        ->get_service("org.freedesktop.UPower")
        ->get_object("/org/freedesktop/UPower/devices/battery_BAT0");

    my $time;
    my $icon = get_battery_icon($batt->Percentage, $batt->State);
    if ($batt->State == $UPOWER_STATE{discharging}) {
        $time = timedelta($batt->TimeToEmpty);
    } elsif ($batt->State == $UPOWER_STATE{charging}) {
        $time = timedelta($batt->TimeToFull);
    }

    if ($time) {
        printf("%s (%s)\n", chr($icon), $time);
    } else {
        printf("%s (%.1fW)\n", chr($icon), $batt->EnergyRate);
    }
}
